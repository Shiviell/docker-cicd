//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestApp.CarsDiagnosticReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CommonData", Namespace="http://schemas.datacontract.org/2004/07/Eldan.DiagnosticServicesLib.CarsDiagnosti" +
        "c")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestApp.CarsDiagnosticReference.PointerDiagnosticData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestApp.CarsDiagnosticReference.IturanDiagnosticData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestApp.CarsDiagnosticReference.InetDiagnosticData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestApp.CarsDiagnosticReference.CarData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TestApp.CarsDiagnosticReference.EdiDiagnosticData))]
    public partial class CommonData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointerDiagnosticData", Namespace="http://schemas.datacontract.org/2004/07/Eldan.DiagnosticServicesLib.CarsDiagnosti" +
        "c")]
    [System.SerializableAttribute()]
    public partial class PointerDiagnosticData : TestApp.CarsDiagnosticReference.CommonData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PointerCarModelNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointerCarNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PointerCarModelName {
            get {
                return this.PointerCarModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PointerCarModelNameField, value) != true)) {
                    this.PointerCarModelNameField = value;
                    this.RaisePropertyChanged("PointerCarModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PointerCarNumber {
            get {
                return this.PointerCarNumberField;
            }
            set {
                if ((this.PointerCarNumberField.Equals(value) != true)) {
                    this.PointerCarNumberField = value;
                    this.RaisePropertyChanged("PointerCarNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IturanDiagnosticData", Namespace="http://schemas.datacontract.org/2004/07/Eldan.DiagnosticServicesLib.CarsDiagnosti" +
        "c")]
    [System.SerializableAttribute()]
    public partial class IturanDiagnosticData : TestApp.CarsDiagnosticReference.CommonData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IturanCarModelNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IturanCarNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IturanCarModelName {
            get {
                return this.IturanCarModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IturanCarModelNameField, value) != true)) {
                    this.IturanCarModelNameField = value;
                    this.RaisePropertyChanged("IturanCarModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IturanCarNumber {
            get {
                return this.IturanCarNumberField;
            }
            set {
                if ((this.IturanCarNumberField.Equals(value) != true)) {
                    this.IturanCarNumberField = value;
                    this.RaisePropertyChanged("IturanCarNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InetDiagnosticData", Namespace="http://schemas.datacontract.org/2004/07/Eldan.DiagnosticServicesLib.CarsDiagnosti" +
        "c")]
    [System.SerializableAttribute()]
    public partial class InetDiagnosticData : TestApp.CarsDiagnosticReference.CommonData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InetCarModelNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InetCarNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InetCarModelName {
            get {
                return this.InetCarModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InetCarModelNameField, value) != true)) {
                    this.InetCarModelNameField = value;
                    this.RaisePropertyChanged("InetCarModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InetCarNumber {
            get {
                return this.InetCarNumberField;
            }
            set {
                if ((this.InetCarNumberField.Equals(value) != true)) {
                    this.InetCarNumberField = value;
                    this.RaisePropertyChanged("InetCarNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarData", Namespace="http://schemas.datacontract.org/2004/07/Eldan.DiagnosticServicesLib.CarsDiagnosti" +
        "c")]
    [System.SerializableAttribute()]
    public partial class CarData : TestApp.CarsDiagnosticReference.CommonData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CarModelNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CarNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CarModelName {
            get {
                return this.CarModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CarModelNameField, value) != true)) {
                    this.CarModelNameField = value;
                    this.RaisePropertyChanged("CarModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CarNumber {
            get {
                return this.CarNumberField;
            }
            set {
                if ((this.CarNumberField.Equals(value) != true)) {
                    this.CarNumberField = value;
                    this.RaisePropertyChanged("CarNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EdiDiagnosticData", Namespace="http://schemas.datacontract.org/2004/07/Eldan.DiagnosticServicesLib.CarsDiagnosti" +
        "c")]
    [System.SerializableAttribute()]
    public partial class EdiDiagnosticData : TestApp.CarsDiagnosticReference.CommonData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EdiCarModelNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EdiCarNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EdiCarModelName {
            get {
                return this.EdiCarModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EdiCarModelNameField, value) != true)) {
                    this.EdiCarModelNameField = value;
                    this.RaisePropertyChanged("EdiCarModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EdiCarNumber {
            get {
                return this.EdiCarNumberField;
            }
            set {
                if ((this.EdiCarNumberField.Equals(value) != true)) {
                    this.EdiCarNumberField = value;
                    this.RaisePropertyChanged("EdiCarNumber");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CarsDiagnosticReference.ICarsDiagnosticService")]
    public interface ICarsDiagnosticService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/UpdateSuppliersData", ReplyAction="http://tempuri.org/ICarsDiagnosticService/UpdateSuppliersDataResponse")]
        void UpdateSuppliersData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/UpdateSuppliersData", ReplyAction="http://tempuri.org/ICarsDiagnosticService/UpdateSuppliersDataResponse")]
        System.Threading.Tasks.Task UpdateSuppliersDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/UpdateSupplierData", ReplyAction="http://tempuri.org/ICarsDiagnosticService/UpdateSupplierDataResponse")]
        void UpdateSupplierData(System.Collections.Generic.List<int> carsNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/UpdateSupplierData", ReplyAction="http://tempuri.org/ICarsDiagnosticService/UpdateSupplierDataResponse")]
        System.Threading.Tasks.Task UpdateSupplierDataAsync(System.Collections.Generic.List<int> carsNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdateEdiData")]
        void UpdateEdiData(TestApp.CarsDiagnosticReference.EdiDiagnosticData ediDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdateEdiData")]
        System.Threading.Tasks.Task UpdateEdiDataAsync(TestApp.CarsDiagnosticReference.EdiDiagnosticData ediDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdatePointerData")]
        void UpdatePointerData(TestApp.CarsDiagnosticReference.PointerDiagnosticData pointerDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdatePointerData")]
        System.Threading.Tasks.Task UpdatePointerDataAsync(TestApp.CarsDiagnosticReference.PointerDiagnosticData pointerDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdateIturanData")]
        void UpdateIturanData(TestApp.CarsDiagnosticReference.IturanDiagnosticData ituranDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdateIturanData")]
        System.Threading.Tasks.Task UpdateIturanDataAsync(TestApp.CarsDiagnosticReference.IturanDiagnosticData ituranDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdateInetData")]
        void UpdateInetData(TestApp.CarsDiagnosticReference.InetDiagnosticData inetDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICarsDiagnosticService/UpdateInetData")]
        System.Threading.Tasks.Task UpdateInetDataAsync(TestApp.CarsDiagnosticReference.InetDiagnosticData inetDiagnosticData, string LoggerSessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/GetCarData", ReplyAction="http://tempuri.org/ICarsDiagnosticService/GetCarDataResponse")]
        TestApp.CarsDiagnosticReference.CarData GetCarData(int carNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/GetCarData", ReplyAction="http://tempuri.org/ICarsDiagnosticService/GetCarDataResponse")]
        System.Threading.Tasks.Task<TestApp.CarsDiagnosticReference.CarData> GetCarDataAsync(int carNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/CalibrateSupplierCar", ReplyAction="http://tempuri.org/ICarsDiagnosticService/CalibrateSupplierCarResponse")]
        void CalibrateSupplierCar(int carNumber, int KM);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICarsDiagnosticService/CalibrateSupplierCar", ReplyAction="http://tempuri.org/ICarsDiagnosticService/CalibrateSupplierCarResponse")]
        System.Threading.Tasks.Task CalibrateSupplierCarAsync(int carNumber, int KM);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICarsDiagnosticServiceChannel : TestApp.CarsDiagnosticReference.ICarsDiagnosticService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CarsDiagnosticServiceClient : System.ServiceModel.ClientBase<TestApp.CarsDiagnosticReference.ICarsDiagnosticService>, TestApp.CarsDiagnosticReference.ICarsDiagnosticService {
        
        public CarsDiagnosticServiceClient() {
        }
        
        public CarsDiagnosticServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CarsDiagnosticServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarsDiagnosticServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarsDiagnosticServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UpdateSuppliersData() {
            base.Channel.UpdateSuppliersData();
        }
        
        public System.Threading.Tasks.Task UpdateSuppliersDataAsync() {
            return base.Channel.UpdateSuppliersDataAsync();
        }
        
        public void UpdateSupplierData(System.Collections.Generic.List<int> carsNumber) {
            base.Channel.UpdateSupplierData(carsNumber);
        }
        
        public System.Threading.Tasks.Task UpdateSupplierDataAsync(System.Collections.Generic.List<int> carsNumber) {
            return base.Channel.UpdateSupplierDataAsync(carsNumber);
        }
        
        public void UpdateEdiData(TestApp.CarsDiagnosticReference.EdiDiagnosticData ediDiagnosticData, string LoggerSessionID) {
            base.Channel.UpdateEdiData(ediDiagnosticData, LoggerSessionID);
        }
        
        public System.Threading.Tasks.Task UpdateEdiDataAsync(TestApp.CarsDiagnosticReference.EdiDiagnosticData ediDiagnosticData, string LoggerSessionID) {
            return base.Channel.UpdateEdiDataAsync(ediDiagnosticData, LoggerSessionID);
        }
        
        public void UpdatePointerData(TestApp.CarsDiagnosticReference.PointerDiagnosticData pointerDiagnosticData, string LoggerSessionID) {
            base.Channel.UpdatePointerData(pointerDiagnosticData, LoggerSessionID);
        }
        
        public System.Threading.Tasks.Task UpdatePointerDataAsync(TestApp.CarsDiagnosticReference.PointerDiagnosticData pointerDiagnosticData, string LoggerSessionID) {
            return base.Channel.UpdatePointerDataAsync(pointerDiagnosticData, LoggerSessionID);
        }
        
        public void UpdateIturanData(TestApp.CarsDiagnosticReference.IturanDiagnosticData ituranDiagnosticData, string LoggerSessionID) {
            base.Channel.UpdateIturanData(ituranDiagnosticData, LoggerSessionID);
        }
        
        public System.Threading.Tasks.Task UpdateIturanDataAsync(TestApp.CarsDiagnosticReference.IturanDiagnosticData ituranDiagnosticData, string LoggerSessionID) {
            return base.Channel.UpdateIturanDataAsync(ituranDiagnosticData, LoggerSessionID);
        }
        
        public void UpdateInetData(TestApp.CarsDiagnosticReference.InetDiagnosticData inetDiagnosticData, string LoggerSessionID) {
            base.Channel.UpdateInetData(inetDiagnosticData, LoggerSessionID);
        }
        
        public System.Threading.Tasks.Task UpdateInetDataAsync(TestApp.CarsDiagnosticReference.InetDiagnosticData inetDiagnosticData, string LoggerSessionID) {
            return base.Channel.UpdateInetDataAsync(inetDiagnosticData, LoggerSessionID);
        }
        
        public TestApp.CarsDiagnosticReference.CarData GetCarData(int carNumber) {
            return base.Channel.GetCarData(carNumber);
        }
        
        public System.Threading.Tasks.Task<TestApp.CarsDiagnosticReference.CarData> GetCarDataAsync(int carNumber) {
            return base.Channel.GetCarDataAsync(carNumber);
        }
        
        public void CalibrateSupplierCar(int carNumber, int KM) {
            base.Channel.CalibrateSupplierCar(carNumber, KM);
        }
        
        public System.Threading.Tasks.Task CalibrateSupplierCarAsync(int carNumber, int KM) {
            return base.Channel.CalibrateSupplierCarAsync(carNumber, KM);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CarsDiagnosticReference.IScheduler")]
    public interface IScheduler {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduler/Refresh", ReplyAction="http://tempuri.org/IScheduler/RefreshResponse")]
        void Refresh(string taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduler/Refresh", ReplyAction="http://tempuri.org/IScheduler/RefreshResponse")]
        System.Threading.Tasks.Task RefreshAsync(string taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduler/Flush", ReplyAction="http://tempuri.org/IScheduler/FlushResponse")]
        void Flush();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScheduler/Flush", ReplyAction="http://tempuri.org/IScheduler/FlushResponse")]
        System.Threading.Tasks.Task FlushAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISchedulerChannel : TestApp.CarsDiagnosticReference.IScheduler, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SchedulerClient : System.ServiceModel.ClientBase<TestApp.CarsDiagnosticReference.IScheduler>, TestApp.CarsDiagnosticReference.IScheduler {
        
        public SchedulerClient() {
        }
        
        public SchedulerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SchedulerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchedulerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SchedulerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Refresh(string taskId) {
            base.Channel.Refresh(taskId);
        }
        
        public System.Threading.Tasks.Task RefreshAsync(string taskId) {
            return base.Channel.RefreshAsync(taskId);
        }
        
        public void Flush() {
            base.Channel.Flush();
        }
        
        public System.Threading.Tasks.Task FlushAsync() {
            return base.Channel.FlushAsync();
        }
    }
}
