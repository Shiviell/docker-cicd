
pipeline {
    agent any

    environment {
        GIT_URL = 'https://github.com/yanivomc/docker-cicd.git'
        GIT_BRANCH = 'eldan'
        GIT_CREDENTIALS_ID = 'git-credentials-id'
        REGISTRY_CREDS = 'dockerRepoeldan'
        DOCKER_REPO = 'eldan-repo.devopshift.com'
        Dockerfile_Name = 'DockerfileWindows'
        WORKSPACEFOLDER = "${WORKSPACE}\\mockRepo\\core-eldan\\"
        ROOTFOLDER = "${WORKSPACE}\\"
        // ensure you use double backslashes in Windows environments
        NEXUS_API_KEY = '121d0000-0f4c-314a-8674-ca3f2db5847a'
        COMPOSE_PARALLEL_BUILD=2


    }

    stages {
        stage('Clone repository') {
            steps {
                git branch: GIT_BRANCH, url: GIT_URL
            }
        }

        stage('Parallel artifact build') {
            steps {
                script {
                    echo "Workspace Folder: ${env.WORKSPACEFOLDER} and PARALLEL BUILD ${env.COMPOSE_PARALLEL_BUILD}"
                    def runCommand = "powershell -command \"cd '${env.WORKSPACEFOLDER}'; docker-compose --parallel ${env.COMPOSE_PARALLEL_BUILD} build --build-arg NEXUS_API_KEY='${env.NEXUS_API_KEY}' --build-arg BUILD_NUMBER='${env.BUILD_NUMBER}-${GIT_BRANCH}'\""
                    // bat runCommand
                }
            }
        }
         stage('Matrix artifact build') {
            steps {
                script {
                    echo "Workspace Folder: ${env.WORKSPACEFOLDER} "
                    def pipInstall = "powershell -command \"cd '${env.WORKSPACEFOLDER}'; pip install -r requirements.txt\""
                    bat pipInstall
                    def runCommand = "powershell -command \"cd '${env.ROOTFOLDER}'; python '.\\mockRepo\\core-eldan\\server.py1\'""
                    bat runCommand
                }
            }
        }
    }
}

