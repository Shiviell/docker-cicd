pipeline {
    agent any

    environment {
        GIT_URL = 'https://github.com/yanivomc/docker-cicd.git'
        GIT_BRANCH = 'eldan'
        GIT_CREDENTIALS_ID = 'git-credentials-id'
        REGISTRY_CREDS = 'dockerRepoeldan'
        DOCKER_REPO = 'eldan-repo.devopshift.com'
        DOCKER_IMAGE_NAME = "${DOCKER_REPO}/buildroot/buildroot"
        DOCKER_IMAGE_TAG = "1.00.0"
        DOCKER_FILE = 'buildroot.Dockerfile'
        DOCKER_ARTIFACT_FILE = 'buildroot.artifacts.Dockerfile'
        WORKSPACEFOLDER = './mockRepo/core-eldan/'
        BINARY_UPLOADER_IMAGE = 'eldan-repo.devopshift.com/binary_manager/binary_manager:1.00.1'
        BINARY_ARTIFACT_FILE = '/resources/output/sx4000/images/buildroot-artifact.tar'
    }

    stages {
        stage('Clone repository') {
            steps {
                git branch: GIT_BRANCH, url: GIT_URL
            }
        }


        stage('Parallel artifact build') {
            steps {
                script {
                    parallel(
                        eldanCore: {
                            // Run docker bake command
                            def runCommand = "cd ${WORKSPACEFOLDER} && docker buildx bake -f  docker-bake.hcl --set *.args.BUILD_NUMBER=${env.BUILD_NUMBER}"
                            sh(runCommand)
                        }
                            )
                            }
                        }
                    
                }
            
        stage('Running global jobs') {
            steps {
                script {
                    // Run server.py
                    def runCommand = "cd ${WORKSPACEFOLDER} && docker run -ti -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd)/src:/app/mockRepo/core-eldan/src/ yanivomc/eldan-pipeline"
                    sh(runCommand)
                }
            }
        }
    }

   

    triggers {
        pollSCM('H/5 * * * *')
    }
}
