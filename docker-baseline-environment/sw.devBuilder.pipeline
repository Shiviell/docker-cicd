pipeline {
    agent any

    environment {
        GIT_URL = 'http://gitlab.eldan.lan/softdev/docker-baseline-environment.git'
        GIT_CREDENTIALS_ID = 'git-credentials-id'
        REGISTRY_CREDS = 'dockerRepoeldan'
        DOCKER_REPO = 'eldan-repo.devopshift.com'
        DOCKER_ARTIFACT_FILE = 'sw.devBuilder.Dockerfile'
    }

    stages {
        stage('Clone repository') {
            steps {
                checkout([$class: 'GitSCM', 
                    // branches: [[name: 'jenkins_docker']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: true, shallow: true, timeout: 120]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: GIT_CREDENTIALS_ID, url: GIT_URL]]
                ])
            }
        }


        stage('Build and Publish Artifact Image') {
            steps {
                script {
                    docker.withRegistry('https://eldan-repo.devopshift.com', REGISTRY_CREDS) {
                        def app = docker.build("${DOCKER_REPO}/swdevbuilder/swdevbuilder-artifact:${env.BUILD_NUMBER}", "-f ${DOCKER_ARTIFACT_FILE} .")
                        app.push("${env.BUILD_NUMBER}") // Pushes the image with the build number tag
                        app.push("latest") // Also pushes the image with the 'latest' tag
                    }
                }
            }
        }
    }

    triggers {
        pollSCM('H/5 * * * *')
    }
}
